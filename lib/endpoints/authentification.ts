/**
 * This is the Authentification Class, it contains all the methods to handle the authentification and token.
 * Those actions do not require any Query Role.
 * @class Authentification
 * @link https://docs.freemmorpgmaker.com/en-US/api/v1/endpoints/authentication.html
 * @author AriusII
 */
export class Authentification {
	constructor() {
	}

	/**
	 * @documentation https://docs.freemmorpgmaker.com/en-US/api/v1/endpoints/authentication.html#get-token
	 * @param url The https://url:port of the server
	 * @param username The username of the API user
	 * @param password The password of the API user
	 * @returns The token
	*/
	getToken(url: string, username: string, password: string) {
		return fetch(`${url}/api/oauth/token`, {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json'
			},
			body: JSON.stringify({
				grant_type: 'password',
				username: username,
				password: password
			})
		})
	}

	/**
	 * It takes a url and a token, and returns a fetch request to the url with the token in the body.
	 * @param {string} url - The URL of the server you're trying to authenticate with.
	 * @param {string} token - The token you want to refresh
	 * @returns A promise.
	 */
	refreshToken(url: string, token: string) {
		return fetch(`${url}/api/oauth/token`, {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json'
			},
			body: JSON.stringify({
				grant_type: 'refresh_token',
				refresh_token: token
			})
		})
	}

	/**
	 * It takes a url, a token, and a user, and returns a fetch request that deletes the token from the
	 * database.
	 * @param {string} url - The url of the server you're trying to connect to.
	 * @param {string} token - The token that was generated by the server
	 * @param {string} user - The user's username
	 * @returns A promise.
	 */
	deleteToken(url: string, token: string, user: string) {
		return fetch(`${url}/api/oauth/token/${user}`, {
			method: 'DELETE',
			headers: {
				'Content-Type': 'application/json',
				'Authorization': `Bearer ${token}`
			}
		})
	}

	/**
	 * It takes a url, a token, and a user, and then it deletes the token from the database.
	 * @param {string} url - the url of the server
	 * @param {string} token - The token that is being deleted
	 * @param {string} user - the user's username
	 * @returns The response from the server.
	 */
	deleteTokenById(url: string, token: string, user: string) {
		return fetch(`${url}/api/oauth/token/${user}/${token}`, {
			method: 'DELETE',
			headers: {
				'Content-Type': 'application/json',
				'Authorization': `Bearer ${token}`
			}
		})
	}
}